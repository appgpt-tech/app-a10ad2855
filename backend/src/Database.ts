//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { MeetingsEntity } from './db/Meetings.entity';
import { NotesEntity } from './db/Notes.entity';
import { DiagramsEntity } from './db/Diagrams.entity';
import { PersonalNotebooksEntity } from './db/PersonalNotebooks.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      MeetingsEntity,
      NotesEntity,
      DiagramsEntity,
      PersonalNotebooksEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        { name: 'name 1', email: 'email 1', role: 'role 1', id: 39 },
        { name: 'name 2', email: 'email 2', role: 'role 2', id: 53 },
        { name: 'name 3', email: 'email 3', role: 'role 3', id: 93 },
        { name: 'name 4', email: 'email 4', role: 'role 4', id: 16 },
        { name: 'name 5', email: 'email 5', role: 'role 5', id: 89 },
      ],
      Meetings: [
        {
          title: 'title 1',
          date: '2023-11-28T18:11:54.242Z',
          time: '2023-12-23T21:10:36.107Z',
          agenda: 'agenda 1',
          participants: 1,
          id: 84,
        },
        {
          title: 'title 2',
          date: '2025-01-11T08:51:51.032Z',
          time: '2024-05-06T18:08:12.732Z',
          agenda: 'agenda 2',
          participants: 2,
          id: 77,
        },
        {
          title: 'title 3',
          date: '2023-11-12T07:45:59.544Z',
          time: '2025-03-17T13:06:42.094Z',
          agenda: 'agenda 3',
          participants: 3,
          id: 78,
        },
        {
          title: 'title 4',
          date: '2024-06-16T00:35:39.005Z',
          time: '2023-05-28T13:15:47.132Z',
          agenda: 'agenda 4',
          participants: 4,
          id: 4,
        },
        {
          title: 'title 5',
          date: '2023-12-29T06:10:59.823Z',
          time: '2024-04-09T22:18:39.222Z',
          agenda: 'agenda 5',
          participants: 5,
          id: 48,
        },
      ],
      Notes: [
        {
          title: 'title 1',
          content: 'content 1',
          author: 1,
          creationDate: '2024-10-09T15:34:34.243Z',
          id: 83,
        },
        {
          title: 'title 2',
          content: 'content 2',
          author: 2,
          creationDate: '2025-01-16T16:11:50.496Z',
          id: 16,
        },
        {
          title: 'title 3',
          content: 'content 3',
          author: 3,
          creationDate: '2024-06-19T16:05:37.715Z',
          id: 46,
        },
        {
          title: 'title 4',
          content: 'content 4',
          author: 4,
          creationDate: '2023-07-12T13:38:41.907Z',
          id: 26,
        },
        {
          title: 'title 5',
          content: 'content 5',
          author: 5,
          creationDate: '2025-02-15T18:13:52.582Z',
          id: 35,
        },
      ],
      Diagrams: [
        {
          title: 'title 1',
          description: 'description 1',
          creator: 1,
          creationDate: '2023-09-28T19:40:19.136Z',
          copyPaste: false,
          colorOptions: 'colorOptions 1',
          customLines: 'customLines 1',
          id: 25,
        },
        {
          title: 'title 2',
          description: 'description 2',
          creator: 2,
          creationDate: '2024-02-03T21:58:45.129Z',
          copyPaste: false,
          colorOptions: 'colorOptions 2',
          customLines: 'customLines 2',
          id: 6,
        },
        {
          title: 'title 3',
          description: 'description 3',
          creator: 3,
          creationDate: '2024-10-04T15:52:19.826Z',
          copyPaste: false,
          colorOptions: 'colorOptions 3',
          customLines: 'customLines 3',
          id: 28,
        },
        {
          title: 'title 4',
          description: 'description 4',
          creator: 4,
          creationDate: '2024-11-16T16:58:05.369Z',
          copyPaste: false,
          colorOptions: 'colorOptions 4',
          customLines: 'customLines 4',
          id: 67,
        },
        {
          title: 'title 5',
          description: 'description 5',
          creator: 5,
          creationDate: '2025-03-31T01:16:16.731Z',
          copyPaste: false,
          colorOptions: 'colorOptions 5',
          customLines: 'customLines 5',
          id: 11,
        },
      ],
      PersonalNotebooks: [
        {
          title: 'title 1',
          content: 'content 1',
          author: 1,
          creationDate: '2024-12-11T19:46:07.787Z',
          id: 59,
        },
        {
          title: 'title 2',
          content: 'content 2',
          author: 2,
          creationDate: '2025-01-06T07:56:35.964Z',
          id: 52,
        },
        {
          title: 'title 3',
          content: 'content 3',
          author: 3,
          creationDate: '2024-02-21T12:39:30.186Z',
          id: 57,
        },
        {
          title: 'title 4',
          content: 'content 4',
          author: 4,
          creationDate: '2025-01-29T23:46:00.394Z',
          id: 17,
        },
        {
          title: 'title 5',
          content: 'content 5',
          author: 5,
          creationDate: '2023-05-15T03:25:13.336Z',
          id: 35,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('MeetingsEntity', data.Meetings);
      await this.SeedResource('NotesEntity', data.Notes);
      await this.SeedResource('DiagramsEntity', data.Diagrams);
      await this.SeedResource(
        'PersonalNotebooksEntity',
        data.PersonalNotebooks,
      );
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
